////////////////////////////////////////////////////////////////////////////////////////////
//
//  File: caBasedKerning.gdl
//
//  Included at end of master.gdl only to generate kerning calculations.
//
////////////////////////////////////////////////////////////////////////////////////////////

/*
    This file is part of Harmattan font family 
    (https://software.sil.org/harmattan/) and is 
    Copyright (c) 2014-2024 SIL International (https://www.sil.org/),
    with Reserved Font Names "Harmattan" and "SIL".

    This Font Software is licensed under the SIL Open Font License,
    Version 1.1.

    You should have received a copy of the license along with this Font Software.
    If this is not the case, go to (https://openfontlicense.org/) for all the
    details including an FAQ.
*/

//---------------------------------------------------


// GDL-defined constants for collision avoidance flags:
#define COLL_FIX 1
#define COLL_IGNORE 2
#define COLL_START 4
#define COLL_END 8
#define COLL_KERN 16
#define COLL_ISSPACE 128
#define ORDER_LEFTDOWN 1
#define ORDER_NOABOVE 4
#define ORDER_NOBELOW 8

// Macros for setting flags:
#define setbits(f,m,v) (f & (~m)) | v
#define SET_FIX(f)     setbits(f, COLL_FIX, COLL_FIX)
#define SET_START(f)   setbits(f, COLL_START, COLL_START)
#define SET_END(f)     setbits(f, COLL_END, COLL_END)
#define SET_KERN(f)    setbits(f, COLL_KERN, COLL_KERN)
#define SET_ISSPACE(f) setbits(f, COLL_ISSPACE, COLL_ISSPACE)


table(glyph)

// This isn't the complete list of initials or isolates, but trying it for now
cComplexShape = (
    cDualLinkIsol 
    cDualLinkInit 
    cRightLinkIsol
    //cwarsh
    cAllLamAlefLig
    cAlefPlusMark   
    
    // classes cloclWLF and chalf include the fina forms which we don't need, so manually enumerate here:

    g_dal_ar_locl_w_l_f g_thal_ar_locl_w_l_f g_ddal_ar_locl_w_l_f g_dahal_ar_locl_w_l_f
    g_ddahal_ar_locl_w_l_f g_dal_ring_ar_locl_w_l_f g_dal_dotbelow_ar_locl_w_l_f g_dal_dotbelow_tah_ar_locl_w_l_f
    g_dul_ar_locl_w_l_f  g_dal_threedotsdown_ar_locl_w_l_f g_dal_fourdots_ar_locl_w_l_f g_dal_vinvertedabove_ar_locl_w_l_f
    g_dal_twodotsverticalbelow_tah_ar_locl_w_l_f g_dal_vinvertedbelow_ar_locl_w_l_f g_dal_threedotsbelow_ar_locl_w_l_f
    
    g_sad_ar_half g_sad_twodotsbelow_ar_half g_sad_threedots_ar_half g_sad_threedotsbelow_ar_half
    g_dad_ar_half g_dad_dotbelow_ar_half
    
    g_kashida_ar

) {collision {
        complexFit = true; 
             }

  } ; 

// NB: Can't set min.x and max.x here because current engine isn't transferring them
// correctly to slot attributes. (was fixed in https://github.com/silnrsi/graphite/commit/70422617ec4e797288f5a1150fcd6c30ab7babed)
// Instead, we will set them later in the kerning pass.

// Set collision margin, complexFit and flags for all reh-like things
cRehAll { collision {
            margin = 190m;
            complexFit = true;
            flags = COLL_FIX + COLL_KERN; // + COLL_END + COLL_START
                    }
        };

// We need collision fixing for these:
cAlefsWCollisions = (cAlefIso cAlefFin cAllLamAlefLig)
    { collision {
        margin = 190m;
        complexFit = true;
        flags = COLL_FIX + COLL_KERN;
                }
    };

// Other chars needed:
g_space { collision.flags = COLL_END + COLL_START  + COLL_ISSPACE} ;
g_zerowidthjoiner { collision.flags = COLL_IGNORE} ;  

endtable; // glyph



//---------------------------------------------------
table (positioning)

// Collision-Avoidance-based kerning

pass(3) 
    // Turn of kerning if next slot is a whitespace char:
    (cAlefsWCollisions cRehAll)   { collision.flags = 0 } / _ MARKS cWhitespace;

    // Set slot attributes for CA-based kerning:
    cRehAll { collision {
                min.x = -1000m ; 
                max.x = 1000m  ;    
                        }
            };

    // These only have collisions if they have marks on top; otherwise don't worry about them.
//    cAlefsWCollisions { collision { min.x = -1000m; max.x = 1000m; } }  g_alefPlaceholder?  cAnyMarks;

endpass;

pass(4) {CollisionFix = 2; AutoKern = 1}
    // No rules, just run the collision avoidance algorithm
endpass;

endtable; // pos

