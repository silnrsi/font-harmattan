////////////////////////////////////////////////////////////////////////////////////////////
//
//	File: master.gdl
//
//	Main Graphite code file for Harmattan, including all rules.
//
////////////////////////////////////////////////////////////////////////////////////////////

/*
	This file is part of Harmattan font family 
	(http://scripts.sil.org/Harmattan) and is 
	Copyright (c) 2014-2020 SIL International (http://www.sil.org/),
	with Reserved Font Names "Harmattan" and "SIL".

	This Font Software is licensed under the SIL Open Font License,
	Version 1.1.

	You should have received a copy of the license along with this Font Software.
	If this is not the case, go to (http://scripts.sil.org/OFL) for all the
	details including an FAQ.
*/

#include "stddef.gdh"
AutoPseudo = 0;
ScriptDirection = HORIZONTAL_RIGHT_TO_LEFT;
Bidi = true;

environment {MUnits=2048};

#ifndef opt2
#define opt(x)      [x]?
#define opt2(x)     [opt(x) x]?
#define opt3(x)     [opt2(x) x]?
#define opt4(x)     [opt3(x) x]?
#endif

#if 0   // DESIGN NOTES

One of the complex issues is mark attachment. Problems stem from the following issues:

1) Do we require marks to be in a particular order?
	The typical sequence of marks is shadda or hamza, followed by vowel, followed by quranic mark.
	Windows Arabic uses this order, but a canonical Unicode string will not always be in this order.
	Further, non-canonical Unicode strings can have the marks in any order.
	Decision: We need to support any order.

2) Do we visually identify illogical mark sequences?
	While the order of the marks on a given base is variable, certain marks should not occur
	simultaneously. For example, no more than one vowel mark should occur. If two vowels occur on 
	the same base, we can visually identify this error by inserting a dotted circle between them
	which will then act as a base for the second vowel.
	But detecting this if we allow any order vowels (see 1) is a bit tricky. 
	Decision: This kind of feedback is probably unwise for minority languages.

3) Exactly what marks are mutually exclusive? Seems clear that the vowels (e.g kasra, fatha, damma,
	kasratan, fathatan, dammatan, sukun) are mutually exclusive with each other. For Arabic
	shadda, hamza above, hamza below, and maddah are also mutually exclusive, but I don't know about
	other languages. I also don't know about the remaining (i.e., quranic) marks.
	Decision: assume shadda, hamza a/b, maddah and mark noon ghunna are mutually exclusive.
	
4) However, maddah works differently from shadda and hamza
	in that it is placed above the vowel rather than below. (For example, superscript alef + maddah)

To accomplish all this, the design we use is to reorder the marks to a logical
order based on 4 classes:
	cMark1 class contains shadda, hamza, mark noon ghunna
	cMark2 class contains the vowels
	cMark3 class contains maddah
	cMark4 class contains quranic marks and Rohingya tones
	
Only cMark2 and cMark4 can have duplicates. Except right now there are no outer attachment points for the
quranic marks, so multiples don't work right.


#endif

// Glyph definitions and rules for codepage 1252 composites
#include "cp1252.gdl"

// Hard-coded glyph and class definitions:
#include "HarGlyphs.gdh"

// Features 
#include "HarFeatures.gdh"


#define alefAttached user1

// Allow a sequence of up to 4 marks.
#define MARKS [ cAnyMarks [ cAnyMarks [ cAnyMarks cAnyMarks? ]? ]? ]?

#define MARKSBELOW [ cAnyMarksBelow [ cAnyMarksBelow cAnyMarksBelow? ]? ]?

#define MARKSABOVE [ cAnyMarksAbove [ cAnyMarksAbove cAnyMarksAbove? ]? ]?


table(substitution)

pass(1) {Direction = LEFT_TO_RIGHT}	// Encoding, decomposition, mirroring

	
	// NB: This pass also includes cp1252 compositions
	
	// NB: I think that even though this is an ABS decomposition, it can be done in a LTR pass because
	//     the reverser will make sure the mark always follows the base:
	// QUESTION: are there more things that need to be decomposed?
	cAlefPlusMark _ >  g_alef_ar:1  cAlefMark$1:1 ;
	
//	if (graphite1mirror)    // No longer support Graphite 1 mirroring?
//		(cMirrorOpen cMirrorClose)  >  (cMirrorClose cMirrorOpen);
//	endif;
	
	// The following is a debugging tool so you can find out whether the app is rendering with Graphite or not.
	// The string "RenderingUnknown" will be rendered as "RenderingGraphite":
	
	codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _               > 
	codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  / 
		codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

	// Subtending marks
	// This is in a LTR pass because they are category (AN) and the digits that follow are collected into
	// a LTR sequence by the bidi algorithm.
	
	cSignTakes4 cDigitsAny cDigitsAny cDigitsAny cDigitsAny  >
		cSign4 cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes3Medium cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Medium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;
		
	cSignTakes3Small cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Small cDigitsAnySmall cDigitsAnySmall cDigitsAnySmall;
		
	cSignTakes2 cDigitsAny cDigitsAny  >
		cSign2 cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes1 cDigitsAny  >  cSign1  cDigitsAnyMedium;
	
endpass; // 1

if (utr53 == on)
pass(2)

	// Simulation of UTR53
	
	// Notes:
	// 1) We don't swap the glyphs, because that would mess up the original order,
	//    rather we delete and insert.
	// 2) glyphs for fixed-position combining classes (other than shadda and daggeralef)
	//    won't be correctly ordered, but usually not more than one anyway.

	_  cUTR53_1_skip  cUTR53_1  > @7:7  @2  _ / _  ^  _  opt4(cUTR53_1_skip)  _; // move 220 MCM to front
	_  cUTR53_2_skip  cUTR53_2  > @7:7  @2  _ / _  ^  _  opt4(cUTR53_2_skip)  _; // move 230 MCM to just after 220 MCM
	_  cUTR53_3_skip  cUTR53_3  > @7:7  @2  _ / _  ^  _  opt4(cUTR53_3_skip)  _; // shadda is next
	_  cUTR53_4_skip  cUTR53_4  > @7:7  @2  _ / _  ^  _  opt4(cUTR53_4_skip)  _; // other fixed position glyphs (except daggeralef)
	_  cUTR53_5_skip  cUTR53_5  > @7:7  @2  _ / _  ^  _  opt4(cUTR53_5_skip)  _; // dagger alef
	_  cUTR53_6_skip  cUTR53_6  > @7:7  @2  _ / _  ^  _  opt4(cUTR53_6_skip)  _; // other 220 in front of remaining 230.
	
#if 0

// old code
 	// Reorder marks to "logical" order (this allows for arbitrary order input)
 	
	// NB: Only cMark2 (vowel marks) and cMark4 (quranic marks) can have multiples.
	// The rules below allow for up to 3 vowel marks and up to 3 quranic marks,
	// with a total of 4 marks.
		
	_  cMark234  cMark1  >  @5:5  @2  _  / _  ^  _  [ cMark234 cMark234? ]?  _;
	_  cMark34   cMark2  >  @5:5  @2  _  / _  ^  _  [ cMark34  cMark34?  ]?  _;
	_  cMark4    cMark3  >  @5:5  @2  _  / _  ^  _  [ cMark4   cMark4?   ]?  _;
	
	// Note: Jonathan says inserting circles is a bad idea for minority language support.

#endif

endpass; // 2
endif;


pass(3)	// Contextual forms, lam-alef ligature, subtending marks

	// Lam-alef
	
	// Here is JK's elegant solution to contextual forms using a ligature glyph...
/***
	(g_lam_ar g_lam_ar_fina)=L  g_alef_ar=A  > 
		(absLamAlef absLamAlefFin):(L A) {component {lam.ref = @L; alef.ref=@A } } gAlefPlaceholder
		/ _  MARKS  _  MARKS ^;
***/
	// ...but we're using two separate glyphs, because of all the combinations.
	cLamIso cAlefIso  >  cLamIniBeforeAlef {alefAttached = false}  cAlefFinAfterLamIni  / _ MARKS ^ _ ;
	cLamFin cAlefIso  >  cLamMedBeforeAlef {alefAttached = false}  cAlefFinAfterLamMed  / _ MARKS ^ _ ;

	// All other contextual forms
	
	(cDualLinkIsol cDualLinkFina g_kashida_ar g_zerowidthjoiner) (cDualLinkIsol cRightLinkIsol g_kashida_ar g_zerowidthjoiner) > 
		(cDualLinkInit cDualLinkMedi g_kashida_ar g_zerowidthjoiner) (cDualLinkFina cRightLinkFina g_kashida_ar g_zerowidthjoiner)
		/ _  MARKS ^ _ ;

/*** The above is *almost* expressible in with the classes generated by make_gdl... but not quite,
         as there is no way to express cDualLinkFina:
	(cno_init c_???? g_kashida_ar g_zerowidthjoiner) (cno_fina g_kashida_ar g_zerowidthjoiner) >
		(c_init c_medi g_kashida_ar g_zerowidthjoiner) (c_fina g_kashida_ar g_zerowidthjoiner)
		/ _  MARKS ^ _ ;
***/


endpass; // 3


pass(4)	// Features, special behaviors

	cLowHamzaBase  g_hamzaabove_ar  >  cLowHamzaComposed:(1 2)  _;
	
	// Allah ligatures:

	// Rule 3:
	
	// alefIso-lam-lam-heh
	g_alef_ar g_lam_ar_init g_lam_ar_medi _ _ (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_alef_ar_allah g_lam_ar_allah1_init g_lam_ar_allah2_medi=L g_shadda_ar:L g_alefabove_ar:L (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina) 
		/ _ MARKS _ _ _ _ _;

	// Rule 2:

	// lamInit-lam-shadda-alef-heh
	g_lam_ar_init g_lam_ar_medi (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_allah1_init g_lam_ar_allah2_medi (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina)
		/ (cRightLinkIsol cRightLinkFina) MARKS _ _ g_shadda_ar (g_alefabove_ar g_fatha_ar) _;

	// lamInit-lam-alef-shadda-heh
	g_lam_ar_init g_lam_ar_medi (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_allah1_init g_lam_ar_allah2_medi (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina)
		/ (cRightLinkIsol cRightLinkFina) MARKS _ _ (g_alefabove_ar g_fatha_ar) g_shadda_ar _;

	// lamMedi-lam-shadda-alef-heh
	g_lam_ar_medi g_lam_ar_medi (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_allah1_medi g_lam_ar_allah2_medi (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina)
		/ (cDualLinkInit cDualLinkMedi) MARKS _ _ g_shadda_ar (g_alefabove_ar g_fatha_ar) _;

	// lamMedi-lam-alef-shadda-heh
	g_lam_ar_medi g_lam_ar_medi (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_allah1_medi g_lam_ar_allah2_medi (g_heh_ar_allah_fina g_hehgoal_ar_allah_fina)
		/ (cDualLinkInit cDualLinkMedi) MARKS _ _ (g_alefabove_ar g_fatha_ar) g_shadda_ar _;


	// Warsh diacritic placement:

	//NB: It is important to remember that by this time the marks are ordered.
	
	if (warshDiacritics == std)
		(g_alef_ar g_alef_ar_fina)=A g_hamzaabove_ar=H > (g_alef_hamzaabove_ar g_alef_hamzaabove_ar_fina):(A H) _ / _ cMark1? _ ;
		(g_alef_ar g_alef_ar_fina)=A g_hamzabelow_ar=H > (g_alef_hamzabelow_ar g_alef_hamzabelow_ar_fina):(A H) _ / _ cMark1? _ ;
		g_lam_ar_pre_alef_init=L    g_hamzaabove_ar=H > g_lam_hamza_ar_pre_alef_init:(L H) _ / _ cMark1? _ ;
	endif;
	if (warshDiacritics != std)
		(g_alef_ar g_alef_ar_fina)=A g_hamzaabove_ar=H > (g_alef_hamzaabove_ar_warsh g_alef_hamzaabove_ar_warsh_fina):(A H) _ / _ cMark1? _ ;
		(g_alef_ar g_alef_ar_fina)=A g_hamzabelow_ar=H > (g_alef_hamzabelow_ar_warsh g_alef_hamzabelow_ar_warsh_fina):(A H) _ / _ cMark1? _ ;
		g_lam_ar_pre_alef_init=L    g_hamzaabove_ar=H > g_lam_hamza_ar_pre_alef_warsh_init:(L H) _ / _ cMark1? _ ;
		if (warshDiacritics == touching)
			// NB: can't include cMark1? in context as that would cause this rule to take precidence for alef hamzabelow kasra :
			g_alef_ar=A (g_fatha_ar g_kasra_ar)=V > (g_alef_fatha_ar_warsh g_alef_kasra_ar_warsh)$V:(A,V) _ ; 
		endif;
	endif;
	// Re-attach hamza below alef in Lam-Alef ligatures:
	(g_alef_ar_post_lam_ini_fina g_alef_ar_post_lam_med_fina)=A g_hamzabelow_ar=H > 
		(g_alef_hamzabelow_ar_post_lam_ini_fina g_alef_hamzabelow_ar_post_lam_med_fina):(A H) _ / _ cMark1? _ ;
	
	// yehbarree: substitute .wide variant when appropriate
	
	cno_wide > cwide / cYehBarreeContextAlways MARKS _ ;
	cno_wide > cwide / cYehBarreeContextMarkBelow MARKS cAnyMarksBelow MARKS _ ;
	
	// other simple features:

	if (dalAlt == senegal)
		cno_loclWLF  >  cloclWLF;
	endif;

	if (jeemHahMedAlt == handwritten)
		cno_hand > chand;
	endif;

	if (sadDadAlt == half)
		cno_half > chalf;
	endif;

	if (meemAlt == sindhi)
		cMeem  >  cMeem_sindhi;
	endif;

	if (hehAlt == kurdish)
		cno_Heh  >  cHehKurdish;
	endif;
	if (hehAlt == sindhi)
		cno_Heh  >  cHehSindhi;
	endif;
	if (hehAlt == urdu)
		cno_Heh  >  cHehUrdu;
	endif;

	if (maddahAlt != large)
		cMaddah > cMaddah_small;
	endif;

	if (shaddaKasra == raised)
		g_shadda_ar  cShaddaKasraMarks  >  _  cShaddaKasraLigatures:(1 2);
	endif;
	
	// QUESTION: do we really need these if we're doing the reordering above?
	g_shadda_ar     cShaddaMarks >  _  cShaddaLigatures:(1 2) / _ ^ _ ;
	g_hamzaabove_ar cHamzaMarks  >  _  cHamzaLigatures:(1 2)  / _ ^ _ ;

	if (dammaAlt == filled)
		cDamma > cDamma_filled;
	endif;
	if (dammaAlt == short)
		cDamma > cDamma_short;
	endif;

	if (UAlt == filled)
		cU  >  cU_filled;
	endif;

	if (dammatanAlt == sixNine)
		cno_sixNine > csixNine;
	endif;

	if (daggeralefAlt == large)
		g_alefabove_ar  >  g_alefabove_ar_large  /  cTakesLargeDaggerAlef  _;
	endif;	

	if (ultapeshAlt == filled)
		g_dammainverted_ar > g_dammainverted_ar_filled;
	endif;

	if (sukunAlt == jasmDown)
		cno_downOpen  >  cdownOpen;
	endif;
	if (sukunAlt == jasmLeft)
		cno_leftOpen  >  cleftOpen;
	endif;

	if (endOfAyah == circle)
		cEndOfAyah  >  cEndOfAyahCircle;
	endif;
	if (endOfAyah == square)
		cEndOfAyah  >  cEndOfAyahSquare;
	endif;

	if (easternDigits == sindhi)
		cEasternDigit  >  cEasternDigitSindhi;
	endif;
	if (easternDigits == urdu)
		cEasternDigit  >  cEasternDigitUrdu;
	endif;
	if (easternDigits == rohingya)
		cEasternDigit  >  cEasternDigitRohingya;
	endif;

	if (commaAlt == down)
		cno_downward  >  cdownward;
	endif;
	
endpass; // 4

endtable; // sub


table (positioning)

// Must allow for at least cMark1Below and/or cMark2Below to intervene between base and marks above.
// The code below is more general.

pass(1)
	// Lam-alef components:
#define cHasExit  cTakesexitDia
#define cHasEntry cTakesentryDia
	cHasExit=L {alefAttached = true}  cHasEntry=A {attach {to=@L; at=exitS; with=entryS}; insert = true}
		/ ^ _ {alefAttached == false}  MARKS  _;
	

	// Marks 

	// Note: the superscript-alef may have both the _alef and _diaA att pts; the ordering of these
	// rules assumes the alef AP should be used if there are no intervening marks above.

	calefDia {attach {to = @1; at = alefS; with = alefM}} / cTakesalefDia MARKSBELOW _;
	cdiaADia {attach {to = @1; at = diaAS; with = diaAM}} / cTakesdiaADia MARKSBELOW _;
	cdiaBDia {attach {to = @1; at = diaBS; with = diaBM}} / cTakesdiaBDia opt4(cnTakesdiaBDia) _;	

	// Subtending marks
	// NB: at this point digits should be in visual order, right to left,
	// so we attach the left-most (logically first) to the sign, and proceed to the right.
	
	
	cSignDigit=D4 { attach {to=@D3; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign4=S;

	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign3=S;

	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign2=S;

	cSignDigit { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign1=S;
	
	// However, there is a bug in some integrations (e.g., Firefox) 
	// such that the glyps are still in logical order:
	
	cSign4=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D4 { attach {to=@D3; at=digitRS; with=digitLS }; insert = true};
	
	cSign3=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true};
	

	cSign2=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true};
	

	cSign1=S
	cSignDigit { attach {to=@S;  at=digitRS; with=digitLS }; insert = true};
	
	

endpass; // 1

pass(2)

	// Marks below

	// Special attachment points for lam-alef ligatures, to avoid collisions:
	cTakesdia2BDia=B cAnyMarksBelow {attach {to=@B; at=dia2BS; with=diaBM}}
		/ (g_lam_threedotsbelow_ar_pre_alef_init g_lam_threedotsbelow_ar_pre_alef_medi cAnyMarksBelow) MARKSABOVE _ ^ MARKSABOVE _ ;


endpass; // 2


endtable;


// Collision-Avoidance-based kerning

#include "caBasedKerning.gdl"

endenvironment;
